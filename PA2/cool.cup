import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;

nonterminal Features features;
nonterminal Feature feature;
nonterminal Formal formal;
nonterminal Formals formals_list;

nonterminal Expression expr;
nonterminal Expressions expr_list;
nonterminal Expressions expressions;
nonterminal Cases cases;
nonterminal attr attribute;
nonterminal branch case_branch;
nonterminal let let_remainder;

/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	
	| CLASS TYPEID error SEMI
	| CLASS TYPEID INHERITS TYPEID error SEMI
	| error
	;

/* Feature list may be empty, but no empty features in list. */
feature_list
	::= /* empty */
		{: RESULT = new Features(curr_lineno()); :}
    | feature:f 
    	{: RESULT = new Features(curr_lineno()).appendElement(f); :}	
	| feature_list:f1 feature:f2 
		{: RESULT = f1.appendElement(f2); :} 
	;

/*feature ::= ID( [ formal [[, formal]]∗] ) : TYPE { expr }
| ID : TYPE [ <- expr ]*/


feature ::= 
        attribute:a
	    {: RESULT=a; :}
        | OBJECTID:oid LPAREN formals_list:f1 RPAREN COLON TYPEID:tid LBRACE expr:e RBRACE SEMI 
			{: RESULT = new method(curr_lineno(), oid, f1, tid, e); :}
		| OBJECTID:oid COLON TYPEID:tid ASSIGN expr:e SEMI	
			{: RESULT = new attr(curr_lineno(), oid, tid, e); :}
		| error SEMI	
		;

attribute ::= OBJECTID:id1 COLON TYPEID:id2 SEMI
	  {: RESULT=new attr(curr_lineno(), id1, id2, new no_expr(curr_lineno())); :}
	  | OBJECTID:id1 COLON TYPEID:id2 ASSIGN expr:e SEMI
	  {: RESULT=new attr(curr_lineno(), id1, id2, new no_expr(curr_lineno())); :}
	  | error SEMI
	  ;


formals_list ::= formal:f
	{: RESULT=(new Formals(curr_lineno())).appendElement(f); :}
	| 
    {: RESULT = new Formals(curr_lineno()); :}	
	| formal:fl 
		{: RESULT = (new Formals(curr_lineno())).appendElement(fl); :}
	| formals_list:fs1 COMMA formal:fs2	
		{: RESULT = fs1.appendElement(fs2); :}
	;

/*formal ::= ID : TYPE*/

formal ::= OBJECTID:oid COLON TYPEID:tid 
	{: RESULT = new formalc(curr_lineno(), oid, tid); :}
   ;

cases ::= case_branch:c
     {: RESULT=(new Cases(curr_lineno())).appendElement(c); :}
     | cases:c1 case_branch:c2
     {: RESULT=c1.appendElement(c2); :}
     ;

case_branch ::= OBJECTID:oid COLON TYPEID:oid2 DARROW expr:e SEMI
	    {: RESULT=new branch(curr_lineno(), oid, oid2, e); :}  
	;   

let_remainder ::= 
	OBJECTID:id1 COLON TYPEID:id2 IN expr:e1
	{: RESULT=new let(curr_lineno(), id1, id2, new no_expr(curr_lineno()), e1); :}
	| 
	OBJECTID:id1 COLON TYPEID:id2 ASSIGN expr:e1 IN expr:e2
	{: RESULT=new let(curr_lineno(), id1, id2, e1, e2); :}
	| 
	OBJECTID:id1 COLON TYPEID:id2 COMMA let_remainder:e1
	{: RESULT=new let(curr_lineno(), id1, id2, new no_expr(curr_lineno()), e1); :}
	| 
	OBJECTID:id1 COLON TYPEID:id2 ASSIGN expr:e1 COMMA let_remainder:e2
	{: RESULT=new let(curr_lineno(), id1, id2, e1, e2); :}
	| 
	error COMMA let_remainder
	;


expr_list ::=  /*EMPTY*/
	{: RESULT = new Expressions(curr_lineno()); :}
    | expr:e1
    {: RESULT = new Expressions(curr_lineno()).appendElement(e1); :}
    | expr_list:exl COMMA expr:e1
    {: RESULT = exl.appendElement(e1);:}
;

expressions ::= expr:e SEMI
	    {: RESULT=(new Expressions(curr_lineno())).appendElement(e); :}
	    | expressions:el expr:e SEMI
	    {: RESULT=el.appendElement(e); :}
	    | error SEMI
	    ;


expr ::= 
    /*expr ::= ID <- expr*/
    OBJECTID:oid ASSIGN expr:e 
	{: RESULT = new assign(curr_lineno(), oid, e); :}
	
	|// In case invalid assignment 	 
	OBJECTID ASSIGN error
	
	| /*expr[@TYPE].ID( [ expr [[, expr]]∗] ) */
	expr:e AT TYPEID:tid DOT OBJECTID:oid LPAREN  expr_list:elist RPAREN
	{: RESULT = new static_dispatch(curr_lineno(),e, tid, oid, elist); :}

    | // Method Dispatch    
    expr:e1 DOT OBJECTID:o LPAREN expr_list:e2 RPAREN
    {: RESULT=new dispatch(curr_lineno(), e1, o, e2); :}
	
	| /*ID( [ expr [[, expr]]∗] )*/
	OBJECTID:oid LPAREN expr_list:elist RPAREN
	{: RESULT = new dispatch(curr_lineno(), 
		new object(curr_lineno(), AbstractTable.idtable.addString("self")), oid, elist); :}
    
    |/* if expr then expr else expr fi */
    IF expr:e1 THEN expr:e2 ELSE expr:e3 FI
    {: RESULT = new cond(curr_lineno(), e1, e2, e3); :}
    
    | /*while expr loop expr pool*/
    WHILE expr:e1 LOOP expr:e2 POOL
    {: RESULT = new loop(curr_lineno(),e1,e2); :}
    
    | /*{ [[expr; ]]+}*/
	LBRACE expressions:elist RBRACE
	{: RESULT = new block(curr_lineno(), elist); :}

    |// Blocks not allowed to start with semicolons 	
	LBRACE error SEMI expressions RBRACE
    
    | /* let ID : TYPE [ <- expr ] [[,ID : TYPE [ <- expr ]]]∗ in expr */
    LET let_remainder:e2 
    {: RESULT = e2; :}

    | /* case expr of [[ID : TYPE => expr; ]]+esac */
    CASE expr:e1 OF cases:c1 ESAC
    {: RESULT = new typcase(curr_lineno(), e1, c1);:}
	
	| /*new TYPE*/
	NEW TYPEID:tid
	{: RESULT = new new_(curr_lineno(), tid); :}
	
	| /*isvoid expr*/
	ISVOID expr:e
	{: RESULT = new isvoid(curr_lineno(),e); :}
    
    | /*expr + expr*/	
    expr:e1 PLUS expr:e2 
    {: RESULT = new plus(curr_lineno(),e1,e2); :}
    
    | /*expr - expr*/	
    expr:e1 MINUS expr:e2 
    {: RESULT = new sub(curr_lineno(),e1,e2); :}
    
    | /*expr * expr*/	
    expr:e1 MULT expr:e2 
    {: RESULT = new mul(curr_lineno(),e1,e2); :}
    
    | /*expr / expr*/	
    expr:e1 DIV expr:e2 
    {: RESULT = new divide(curr_lineno(),e1,e2); :}  
    
    | /*˜expr*/	
    NEG expr:e1
    {: RESULT = new neg(curr_lineno(),e1); :} 
    
    | /*expr < expr*/     
    expr:e1 LT expr:e2 
    {: RESULT = new lt(curr_lineno(),e1,e2); :}
    
    | /*expr <= expr*/     
    expr:e1 LE expr:e2 
    {: RESULT = new leq(curr_lineno(),e1,e2); :}
    
    | /*expr = expr*/     
    expr:e1 EQ expr:e2 
    {: RESULT = new eq(curr_lineno(),e1,e2); :}        
    
    | /*not expr*/     
    NOT expr:e1 
    {: RESULT = new comp(curr_lineno(),e1); :}
    
    | /*(expr)*/    
    LPAREN expr:e RPAREN 
    {: RESULT = e; :}    
    
    | /* ID */
    OBJECTID:oid
    {: RESULT = new object(curr_lineno(),AbstractTable.idtable.addString(oid.getString())); :}
    
    | /* integer  */
    INT_CONST:icst
    {: RESULT = new int_const(curr_lineno(), AbstractTable.idtable.addString(icst.getString())); :}
    
    | /* string */
    STR_CONST:scst
    {: RESULT = new string_const(curr_lineno(),AbstractTable.idtable.addString(scst.getString())); :}
    
    | /* true */
    BOOL_CONST:bcst
    {: RESULT = new bool_const(curr_lineno(),bcst); :}
     /* false */   
    ;	